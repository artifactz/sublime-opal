# [PackageDev] target_format: plist, ext: tmLanguage
# http://www.geocities.jp/kosako3/oniguruma/doc/RE.txt
# http://manual.macromates.com/en/language_grammars
---
name: Opal
scopeName: source.opal
fileTypes: [impl, sign]
uuid: 3da0f3f0-8b32-41c9-857c-ce9be39b99d4

patterns:
- name: comment.line.double-dash.opal
  match: \-\-.*$
- name: comment.block.opal
  begin: /\*
  end: \*/

# FUN declaration
- name: meta.function.opal
  begin: ^\s*(FUN)\s+(\w*)\s*(\:)
  end: ($)
  contentName: meta.function.parameters
  beginCaptures:
    '1': { name: storage.type.function.opal }
    '2': { name: entity.name.function.opal }
    '3': { name: punctuation.definition.parameters.begin.opal }
  endCaptures:
    '1': { name: punctuation.definition.parameters.end.opal }
  patterns:
  - name: punctuation.seperator.parameters.opal
    match: \*\*|\->
  - name: variable.parameter.opal
    match: nat|char|real|denotation|bool

# DEF definition
- name: meta.function.opal
  begin: ^\s*(DEF)\s+(\w*)\s*(?:(\())?
  end: (?:(\)))?\s*(==)
  beginCaptures:
    '1': { name: storage.type.function.opal }
    '2': { name: entity.name.function.opal }
    '3': { name: punctuation.definition.parameters.begin.opal }
  endCaptures:
    '1': { name: punctuation.definition.parameters.end.opal }
    '2': { name: punctuation.section.function.begin.opal }
  patterns:
  - name: punctuation.seperator.parameters.opal
    match: \,
  - name: variable.parameter.opal
    match: \w*

# anonymous lambda function
- name: meta.function.opal
  begin: (\\\\)
  end: \.
  beginCaptures:
    '1': { name: storage.type.function.opal }
  patterns:
  - name: punctuation.seperator.parameters.opal
    match: \,
  - name: variable.parameter.opal
    match: \w*

# SORT declaration
- name: meta.sort.opal
  begin: ^\s*(SORT)
  end: $
  beginCaptures:
    '1': { name: storage.type.sort.opal }
  patterns:
  - name: entity.name.type.opal
    match: \b\w*\b

# numbers
- name: constant.numeric.integer.opal
  match: (\b(0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|64|128|256|512|1024|100|1000|10000|100000|1000000)\b)|\"\d+\"!
- name: constant.numeric.real.opal
  match: \"(\d*\.\d+|\d+\.\d*)\"!
- name: constant.numeric.hexadecimal.opal
  match: \"0x\h+\"!
- name: invalid.illegal.unexpected-number
  match: \".*\"!

# strings
- name: string.quoted.double
  begin: (")
  end: (")|(\n)
  beginCaptures:
    '1': { name: punctuation.definition.string.begin.opal }
  endCaptures:
    '1': { name: punctuation.definition.string.end.opal }
    '2': { name: invalid.illegal.unclosed-string.opal }

# sequences
- name: meta.structure.list
  match: (<)\s*\w*(?:\s*,\s*\w*)*\s*(>)
  captures:
    '1': { name: punctuation.definition.list.begin.opal }    
    '2': { name: punctuation.definition.list.end.opal }

# keywords
- name: keyword.meta.opal
  match: ^\s*(SIGNATURE|IMPLEMENTATION)\b
- name: keyword.control.import.opal
  match: (^\s*IMPORT|\b(ONLY|COMPLETELY))\b
- name: keyword.control.opal
  match: \b(IF|THEN|ELSE|FI)\b
- name: keyword.other.opal
  match: \b(LET|IN|WHERE)\b
- name: keyword.operator.comparison.opal
  match: (<|>|(?<!=)=(?!=)|<=|>=)
- name: keyword.operator.arithmetic.opal
  match: (\+|\-)

# builtin types
- name: support.type.opal
  match: \b(Nat|Char|Real)\b

# builtin functions
- name: support.function.builtin
  match: \b(map|filter|zip)\b

# imports
#- name: meta.import
#  begin: ^\s*(IMPORT)\s*\w*\s*(?:(ONLY)|(COMPLETELY))
#  end: \n
#  beginCaptures:
#    '1': { name: keyword.control.import.opal }
#    '2': { name: keyword.control.import.only.opal }
#    '3': { name: keyword.control.import.completely.opal }
...